name: Telemetry Checks and Benchmarks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  cypress-run:
    if: github.repository == 'redwoodjs/redwood'
    strategy:
      matrix:
        os: ['ubuntu-latest']
        node-version: ['14', '16']
      fail-fast: true
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} | Node ${{ matrix.node-version }} latest
    env:
      REDWOOD_CI: 1
      REDWOOD_VERBOSE_TELEMETRY: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies and Build Framework
        run: |
          yarn install --immutable
          yarn build:clean || echo "Project already clean"
          yarn build:js

      - name: Create a temporary directory
        id: createpath
        run: |
          project_path=$(mktemp -d -t redwood.XXXXXX)
          echo "::set-output name=project_path::$project_path"
          framework_path=$(pwd)
          echo "::set-output name=framework_path::$framework_path"

      - name: Create Redwood Project
        run: |
          yarn babel-node packages/create-redwood-app/src/create-redwood-app.js ${{ steps.createpath.outputs.project_path }} --no-yarn-install

      - name: Add Framework Dependencies to Project
        run: |
          yarn project:deps ${{ steps.createpath.outputs.project_path }}

      - name: Run Project Yarn Install
        run: |
          yarn install
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Copy Framework Packages to Project
        run: |
          yarn project:copy ${{ steps.createpath.outputs.project_path }}

      - name: Run `rw info`
        run: |
          yarn rw info
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Run `rw build`
        run: |
          yarn rw build
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Run "prisma migrate dev"
        run: |
          yarn rw prisma migrate dev --name ci-test
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Run "g page"
        run: |
          yarn rw g page home /
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Throw Error | Run `rw g sdl <model>`
        run: |
          yarn rw g sdl DoesNotExist
        working-directory: ${{ steps.createpath.outputs.project_path }}
        continue-on-error: true
